#!/usr/bin/env qore

const VERSION = "0.1";


sub booleanize($bool)
{
    if (tolower($bool) == "true")
        return "True";
    return "False";
}


class LayoutItem
{
    constructor()
    {
        $.objectName = NOTHING;
        $.layoutName = NOTHING;
        $.isWidget = NOTHING;
        $.isItem = NOTHING;
        $.row = NOTHING;
        $.column = NOTHING;
        $.rowspan = NOTHING;
        $.colspan = NOTHING;
    }
    
    # create a layout method as it's required
    # layout.addWidget(object[, r, c [, rspan, cspan]]);
    # or addLayout
    text()
    {
        my $str = "\t\t$." + $.layoutName + ".";
        if ($.isWidget)
            $str += "addWidget";
        else if ($.isItem)
            $str += "addItem";
        else
            $str += "addLayout";
        $str += sprintf("($.%s", $.objectName);
        if ($.row != NOTHING && $.column != NOTHING)
        {
            $str += sprintf(", %s, %s", $.row, $.column);
            my $rspan = ($.rowspan != NOTHING) ? $.rowspan : 1;
            my $cspan = ($.colspan != NOTHING) ? $.colspan : 1;
            #printf("%N\n", $.rowspan);
            if ($rspan == 0 || $cspan == 0)
                printf("# (WW) rowspan or colspan == 0\n");
            else
                $str += sprintf(", %s, %s", $rspan, $cspan);
        }
        $str += ");\n";
        
        return $str;
    }
}



class Uic
{
    constructor($xmlHash, $opts)
    {
        $.opts = $opts;

        $.className = NOTHING;
        $.baseClass = NOTHING;
        
        # specialities for QMainWindow
        $.centralWidget = NOTHING;
        $.menuBar = NOTHING;
        $.statusBar = NOTHING;
        $.toolBar = NOTHING;

        $.mainWidget = True;
        $.currentObject = "$";
        
        $.layoutMap = (); #list
        
        
        
        $.makeHash($xmlHash, "$self");

        $.makeMainWindow();
        $.makeLayoutSettings();
        
        # finalize output
        printf("\t}\n}\n\n} # namespace Ui\n\n");
    }
    
    handleCustomWidgets($h)
    {
        if ($.opts.include)
        {
            printf("# (WW) custom widgets %include clauses are disabled by choice (-i)\n\n");
            return;
        }

        foreach my $i in (keys $h)
        {
            if ($i != "customwidgets")
                continue;
            foreach my $j in ($h.$i."customwidget")
            {
                printf("\%include %s\n", $j."header");
            }
            printf("\n\n\n");
        }
    }

    makeUi($ver)
    {
        # TODO/FIXME: test it.
        if (float($ver."^attributes^"."version") < 4.0) {
            printf("This ui file is generated by old designer. Qt4 is required.\n");
            exit(1);
        }
        printf("#\n# This file has been created by uic-qore\n#\n\n");
        printf("%requires qore >= 0.7.4\n");
        printf("%requires qt-gui\n\n\n");
        $.handleCustomWidgets($ver);
    }

    makeClass($cls)
    {
        $.className = $cls."^attributes^".name;
        $.baseClass = $cls."^attributes^".class;
        $.centralWidget = $cls."widget"[0]."^attributes^"."name";

        printf("# class generated\n");
        printf("\nnamespace Ui {\n\n");
        printf("class %s inherits %s\n", $.className, $.baseClass);
        printf("{\n");
        printf("\tconstructor($parent) : %s($parent)\n", $.baseClass);
        printf("\t{\n");
        
        $.makeActions($cls);
    }
    
    makeActions($cls)
    {
        if ($cls.action == NOTHING)
            return;
        
        foreach my $i in ($cls.action)
        {
            my $name = $i."^attributes^"."name";
            printf("\t\t$.%s = new QAction($self);\n", $name);
            printf("\t\t$.%s.setObjectName(\"%s\");\n", $name, $name);
#             printf("%N\n", $i."property");
            $.currentObject = "$." + $name;
            $.makeProperty($i."property");
        }
        printf("\n");
        $.currentObject = "$";
    }

    makeWidget($w, $parent)
    {
        if ($.mainWidget)
        {
            $.makeClass($w);
            $.mainWidget = False;
            return;
        }
        
        printf("\n");
        foreach my $i in ($w)
        {
            $.currentObject = sprintf("$.%s", $i."^attributes^"."name");
            my $cls = $i."^attributes^"."class";

            # Line is a very special widget :/
            if ($cls == "Line")
            {
                 $cls = "QFrame";
            }

            printf("\t\t%s = new %s(%s);\n", $.currentObject,
                                                 $cls,
                                                 $parent);
            printf("\t\t%s.setObjectName(\"%s\");\n", $.currentObject, $.currentObject);
            my $currentName = $.currentObject;
            $.makeHash($i, $.currentObject);
            
            if ($cls == "QTabWidget")
            {
                #printf("%N\n", $i."widget");
                foreach my $subW in ($i."widget")
                    printf("\t\t%s.addTab($.%s, \"%s\");\n",
                                $currentName,
                                $subW."^attributes^"."name",
                                $subW."attribute"."string");
                                
            }
            
            if ($cls == "QDockWidget")
            {
                #printf("%N\n", $i);
                my $dockArea = $i."attribute"."number";
                my $dockWidgetWidget = $i."widget"."^attributes^"."name";

                if ($.baseClass == "QMainWindow" && $dockArea)
                    printf("\t\t$.addDockWidget(%s, %s);\n", $dockArea, $currentName);
                #if ($.baseClass == "QMainWindow" && $dockWidgetWidget)
                    printf("\t\t%s.setWidget($.%s);\n", $currentName, $dockWidgetWidget);
            }
            
            if ($cls == "QStatusBar")
                $.statusBar = $currentName;
            if ($cls == "QMenuBar")
                $.menuBar = $currentName;
            if ($cls == "QToolBar")
                $.toolBar = $currentName;
        }
    }
    
    makeProperty($prop)
    {
        foreach my $i in ($prop)
        {
            my $name = $i."^attributes^"."name";
            
            switch ($name)
            {
            case "geometry":
                # resize is much better here. It doesn't move the widget into
                # 0,0,x,y location of the screen
#                 printf("\t\t%s.setGeometry(%s, %s, %s, %s);\n",
#                                         $.currentObject,
#                                         $i."rect"."x",
#                                         $i."rect"."y",
#                                         $i."rect"."width",
#                                         $i."rect"."height");
                printf("\t\t%s.resize(%s, %s);\n",
                                         $.currentObject,
                                         $i."rect"."width",
                                         $i."rect"."height");
                break;
            case "sizePolicy":
                printf("\t\t%s.setSizePolicy(new QSizePolicy(QSizePolicy::%s, QSizePolicy::%s));\n",
                                        $.currentObject,
                                        $i."sizepolicy"."^attributes^"."hsizetype",
                                        $i."sizepolicy"."^attributes^"."vsizetype"
                                        );
                break;
            case "windowTitle":
                printf("\t\t%s.setWindowTitle(\"%s\");\n",
                                        $.currentObject,
                                        $i."string");
                break;
            case "orientation":
                printf("\t\t%s.setOrientation(%s);\n", 
                                        $.currentObject,
                                        $i."enum");
                break;
            case "echoMode":
                printf("\t\t%s.setEchoMode(%s);\n",
                                        $.currentObject,
                                        $i."enum");
                break;
            case "focusPolicy":
                printf("\t\t%s.setFocusPolicy(%s);\n",
                                        $.currentObject,
                                        $i."enum");
                break;
            case "maximumSize":
                printf("\t\t%s.setMaximumSize(%s, %s);\n",
                                        $.currentObject,
                                        $i."size"."width",
                                        $i."size"."height");
                break;
            case "minimumSize":
                printf("\t\t%s.setMinimumSize(%s, %s);\n",
                                        $.currentObject,
                                        $i."size"."width",
                                        $i."size"."height");
                break;
            case "text":
                printf("\t\t%s.setText(\"%s\");\n",
                                        $.currentObject,
                                        $i."string");
                break;
            case "title":
                printf("\t\t%s.setTitle(\"%s\");\n",
                                        $.currentObject,
                                        $i."string");
                break;
            case "toolTip":
                printf("\t\t%s.setToolTip(\"%s\");\n",
                                        $.currentObject,
                                        $i."string");
                break;
            case "standardButtons":
                printf("\t\t%s.setStandardButtons(%s);\n",
                                        $.currentObject,
                                        $i."set");
                break;
            case "sizeHint":
                printf("\t\t%s.setSizeHint(new QSize(%s, %s));\n",
                                        $.currentObject,
                                        $i."size"."width",
                                        $i."size"."height");
                break;
            case "currentIndex":
                printf("\t\t%s.setCurrentIndex(%s);\n",
                                        $.currentObject,
                                        $i."number");
                break;
            case "margin":
                printf("\t\t%s.setMargin(%s);\n",
                                        $.currentObject,
                                        $i."number");
                break;
            case "spacing":
                printf("\t\t%s.setSpacing(%s);\n",
                                        $.currentObject,
                                        $i."number");
                break;
            case "alternatingRowColors":
                printf("\t\t%s.setAlternatingRowColors(%s);\n",
                                        $.currentObject,
                                        booleanize($i."bool"));
                break;
            case "readOnly":
                printf("\t\t%s.setReadOnly(%s);\n",
                                        $.currentObject,
                                        booleanize($i."bool"));
                break;
            case "checkable":
                printf("\t\t%s.setCheckable(%s);\n",
                                        $.currentObject,
                                        booleanize($i."bool"));
                break;
            case "childrenCollapsible":
                printf("\t\t%s.setChildrenCollapsible(%s);\n",
                                        $.currentObject,
                                        booleanize($i."bool"));
                break;
            case "wordWrap":
                printf("\t\t%s.setWordWrap(%s);\n",
                                        $.currentObject,
                                        booleanize($i."bool"));
                break;
            case "selectionBehavior":
                printf("\t\t%s.setSelectionBehavior(%s);\n",
                                        $.currentObject,
                                        $i."enum");
                break;
            case "frameShape":
                printf("\t\t%s.setFrameShape(%s);\n",
                                        $.currentObject,
                                        $i."enum");
                break;
            case "viewMode":
                printf("\t\t%s.setViewMode(%s);\n", 
                                        $.currentObject,
                                        $i."enum");
                break;
            # showstopper...
            default:
                printf("# (EE) unhandled property '%s'\n", $name);
            }
        }
    }


    # TODO/FIXME: adding real widgets into the layouts will be done later
    makeLayout($l, $parent)
    {
        my $name = $l."^attributes^"."name";
        printf("\t\t$.%s = new %s(%s);\n",
                            $name,
                            $l."^attributes^"."class",
                            $parent); #$.currentObject == "$" ? "$self" : $.currentObject);

        $.currentObject = "$." + $name;
        foreach my $prop in ($l."property")
            $.makeProperty($prop);

        foreach my $item in ($l."item")
        {
            my $lItem = new LayoutItem();
            if (exists $item."widget")
            {
                $lItem.objectName = $item."widget"."^attributes^"."name";
                $lItem.isWidget = True;
            }
            else if (exists $item."spacer")
            {
                $lItem.objectName = $item."spacer"."^attributes^"."name";
                $lItem.isWidget = False;
                $lItem.isItem = True;                
            }
            else
            {
                $lItem.objectName = $item."layout"."^attributes^"."name";
                $lItem.isWidget = False;
                $lItem.isItem = False;
            }
            $lItem.layoutName = $name;
            $lItem.row = $item."^attributes^"."row";
            $lItem.column = $item."^attributes^"."column";
            $lItem.rowspan = $item."^attributes^"."rowspan";
            $lItem.colspan = $item."^attributes^"."colspan";
            push $.layoutMap, $lItem;

            $.makeHash($item, $parent);
        }
    }
    
    makeLayoutSettings()
    {
        if ($.layoutMap == NOTHING)
            printf("# (WW) There is no given layout. Something went wrong.\n");
        else
        {
            printf("\n\n\t\t# layouts setting\n");
            foreach my $i in ($.layoutMap)
                printf($i.text());
        }     
    }
    
    makeMainWindow()
    {
        if ($.baseClass != "QMainWindow")
            return;
     
        printf("\n\t\t# QMainWindow specials\n");
        if ($.centralWidget != NOTHING)
            printf("\t\t$.setCentralWidget($.%s);\n", $.centralWidget);
        else
            printf("# (WW) cannot set central widget for %s", $.baseClass);
        
        if ($.statusBar != NOTHING)
            printf("\t\t$.setStatusBar(%s);\n", $.statusBar);
        if ($.menuBar != NOTHING)
            printf("\t\t$.setMenuBar(%s);\n", $.menuBar);
        if ($.toolBar != NOTHING)
            printf("\t\t$.addToolBar(%s);\n", $.toolBar);
    }
    
    makeSpacer($spacer)
    {
        $.currentObject =  "$." + $spacer."^attributes^"."name";
        my $oX = "QSizePolicy::Expanding";
        my $oY = "QSizePolicy::Expanding";
        my $x = 1;
        my $y = 1;
        foreach my $i in ($spacer.property)
        {
            switch ($i."^attributes^"."name")
            {
                case "orientation":
                    if ($i."enum" == "Qt::Horizontal")
                    {
                        $oX = "QSizePolicy::Expanding";
                        $oY = "QSizePolicy::Minimum";
                    }
                    else
                    {
                        $oX = "QSizePolicy::Minimum";
                        $oY = "QSizePolicy::Expanding";
                    }
                    break;
                case "sizeHint":
                    $x = $i."size"."width";
                    $y = $i."size"."height";
                    break;
            }
        }
#          = $spacer."propert
        printf("\t\t$.%s = new QSpacerItem(%s, %s, %s, %s);\n",
                    $spacer."^attributes^"."name",
                    $x, $y, $oX, $oY);
    }
    
    makeItem($i)
    {
        # TODO/FIXME: handle layout's and/or itemwidget's item stuffs
        printf("# (WW) makeItem() is empty. TODO/FIXME\n");
    }
    
    makeConnections($conn)
    {
        foreach my $i in ($conn."connection")
        {
            my $receiver = $i."receiver";
            if ($receiver == $.className)
                $receiver = "";
            else
                $receiver = "." + $receiver;

            printf("\t\t$%s.connect($.%s, SIGNAL(\"%s\"), SLOT(\"%s\"));\n",
                                $receiver,
                                $i."sender",
                                $i."signal",
                                $i."slot");
        }
    }
    
    makeMenuActions($act, $parent)
    {
        #printf("%N\n", $parent);
        my $topMenu = False;
        if ($parent."^attributes^".class == "QMenuBar")
            $topMenu = True;

        foreach my $i in ($act)
        {
            my $name = "$." + $i."^attributes^"."name";
            
            if ($topMenu)
            {
                printf("\t\t$.%s.addAction(%s.menuAction());\n",
                                $parent."^attributes^".name,
                                $name);
            }
            else
            {
                if ($name == "$.separator")
                    printf("\t\t%s.addSeparator();\n", $.currentObject);
                else
                    printf("\t\t%s.addAction(%s);\n", $.currentObject, $name);
            }
        }
    }

    makeHash($h, $parent)
    {
        if (type($h) != Type::Hash)
            return;

        foreach $i in (keys $h)
        {
            #printf("Key: %s\n", $i);
            if ($i == "ui")
                $.makeUi($h.$i);

            # moved to widget
            #if ($i == "class")
            #{
            #    $.makeClass($h.$i);
            #    $.makeHash($h.$i);
            #}
        
            else if ($i == "widget")
                $.makeWidget($h.$i, $parent);
            
            else if ($i == "property")
            {
                $.makeProperty($h.$i);
                # no subtags needed
                continue;
            }

            else if ($i == "layout")
                $.makeLayout($h.$i, $parent);
            
            else if ($i == "item")
                $.makeItem($h.$i);
            
            else if ($i == "spacer")
            {
                $.makeSpacer($h.$i);
                # all is handled in its method
                continue;
            }
                
            else if ($i == "connections")
            {
                $.makeConnections($h.$i);
                # no need to handle sub-tags
                continue;
            }
            
            else if ($i == "addaction")
            {
                $.makeMenuActions($h.$i, $h);
                continue;
            }
            
            # TODO/FIXME: is there any "in" operator?
            # ignore silently. This all should be handled by
            # others methods
            else if (   $i == "class"
                || $i == "^attributes^"
                || $i == "name"
                || $i == "enum"
                || $i == "size"
                || $i == "rect"
                || $i == "string"
                || $i == "row"
                || $i == "column"
                || $i == "rowspan"
                || $i == "colspan"
                || $i == "customwidgets")
            {
                continue;
            }
            else
            {
                printf("# (EE) unhandled tag '%s'. All its leafs are lost.\n", $i);
                continue;
            }
            
            $.makeHash($h.$i, $parent);
        }

    }

}



sub help()
{
    printf("\nQore Qt4 module User Interface XML compiler.\n");
    printf("\nUsage: %s [options] <filename.ui>\n", get_script_name());
    printf("       An UI file is processed to the Qore language.\n");
    printf("       Qore code is written to the stdout.\n");
    printf("       Use e.g. redirection to file (%s myfile.ui>myfile.qc\n",
                                                    get_script_name());
    printf("\nOptions:\n");
    printf("        -h --help    Display this text.\n");
    printf("        -v --version Display program version.\n");
    printf("        -d --debug   Generate helper debug runable file.\n");
    printf("        -i --include Don't generate %include statamenets for\n");
    printf("                     costom widgets.\n");
    printf("\n");
}


const opts = 
    (
        "help" : "h,help",
        "version" : "v,version",
        "debug" : "d,debug",
        "include" : "i,include"
    );
    
my $go = new GetOpt(opts);
my $o = $go.parse(\$ARGV);

if ($o.help)
{
    help();
    exit(0);
}

if ($o.version)
{
    printf("Qore Qt4 UI compiler: %s", VERSION);
    exit(0);
}


if (elements $ARGV != 1)
{
    printf("Wrong count of arguments.\n");
    help();
    exit(1);
}

my $f = new File();
$f.open2($ARGV[0]);
my $xml = $f.read(-1);
my $hash = parseXML($xml);
#printf("%N\n", $hash);

my $u = new Uic($hash, $o);


# just in the "debug" (-d) case.
if ($o.debug)
{
    printf("\n\n# Debug code created for unit testing\n");
    printf("
        class main inherits QApplication
        {
            constructor() : QApplication()
            {
                my $mv = new Ui::%s();
                $mv.show();
                $.exec();
            }
        }
        my $e = new main();
        \n", $u.className);
}
